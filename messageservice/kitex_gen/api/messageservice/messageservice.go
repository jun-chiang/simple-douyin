// Code generated by Kitex v0.7.0. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/jun-chiang/simple-douyin/messageservice/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*api.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"sendMessage":    kitex.NewMethodInfo(sendMessageHandler, newMessageServiceSendMessageArgs, newMessageServiceSendMessageResult, false),
		"getMessageList": kitex.NewMethodInfo(getMessageListHandler, newMessageServiceGetMessageListArgs, newMessageServiceGetMessageListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "api",
		"ServiceFilePath": "message.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.MessageServiceSendMessageArgs)
	realResult := result.(*api.MessageServiceSendMessageResult)
	success, err := handler.(api.MessageService).SendMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSendMessageArgs() interface{} {
	return api.NewMessageServiceSendMessageArgs()
}

func newMessageServiceSendMessageResult() interface{} {
	return api.NewMessageServiceSendMessageResult()
}

func getMessageListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.MessageServiceGetMessageListArgs)
	realResult := result.(*api.MessageServiceGetMessageListResult)
	success, err := handler.(api.MessageService).GetMessageList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetMessageListArgs() interface{} {
	return api.NewMessageServiceGetMessageListArgs()
}

func newMessageServiceGetMessageListResult() interface{} {
	return api.NewMessageServiceGetMessageListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, req *api.SendMessageRequest) (r *api.SendMessageResponse, err error) {
	var _args api.MessageServiceSendMessageArgs
	_args.Req = req
	var _result api.MessageServiceSendMessageResult
	if err = p.c.Call(ctx, "sendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMessageList(ctx context.Context, req *api.GetMessageListRequest) (r *api.GetMessageListResponse, err error) {
	var _args api.MessageServiceGetMessageListArgs
	_args.Req = req
	var _result api.MessageServiceGetMessageListResult
	if err = p.c.Call(ctx, "getMessageList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
